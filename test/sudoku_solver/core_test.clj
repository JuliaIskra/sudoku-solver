(ns sudoku-solver.core-test
  (:require [clojure.test :refer :all]
            [sudoku-solver.core :refer :all]))

(deftest correct-solution
  (is (correct? [1 7 4 3 8 5 9 6 2
                 2 9 3 4 6 7 1 5 8
                 5 8 6 1 9 2 7 3 4
                 4 5 1 9 2 3 8 7 6
                 9 2 8 6 7 4 3 1 5
                 3 6 7 8 5 1 2 4 9
                 7 1 9 5 4 8 6 2 3
                 6 3 5 2 1 9 4 8 7
                 8 4 2 7 3 6 5 9 1])))

(deftest incorrect-solution
  (is (not (correct? [1 7 4 3 8 5 9 6 2
                      2 9 3 4 6 7 1 5 8
                      5 8 6 1 9 2 7 3 4
                      4 5 1 9 2 3 8 7 6
                      9 2 8 6 7 4 3 1 5
                      3 6 7 8 5 1 2 4 9
                      7 1 9 5 4 8 6 2 3
                      6 3 5 2 1 9 4 8 7
                      8 4 2 7 1 6 5 9 1]))))

(deftest test-rows
  (is (= (rows [1 2 3 4 5 6 7 8 9
                1 2 3 4 5 6 7 8 9
                1 2 3 4 5 6 7 8 9
                1 2 3 4 5 6 7 8 9
                1 2 3 4 5 6 7 8 9
                1 2 3 4 5 6 7 8 9
                1 2 3 4 5 6 7 8 9
                1 2 3 4 5 6 7 8 9
                1 2 3 4 5 6 7 8 9])
         '((1 2 3 4 5 6 7 8 9)
           (1 2 3 4 5 6 7 8 9)
           (1 2 3 4 5 6 7 8 9)
           (1 2 3 4 5 6 7 8 9)
           (1 2 3 4 5 6 7 8 9)
           (1 2 3 4 5 6 7 8 9)
           (1 2 3 4 5 6 7 8 9)
           (1 2 3 4 5 6 7 8 9)
           (1 2 3 4 5 6 7 8 9)))))

(deftest test-cols
  (is (= (cols [1 2 3 4 5 6 7 8 9
                1 2 3 4 5 6 7 8 9
                1 2 3 4 5 6 7 8 9
                1 2 3 4 5 6 7 8 9
                1 2 3 4 5 6 7 8 9
                1 2 3 4 5 6 7 8 9
                1 2 3 4 5 6 7 8 9
                1 2 3 4 5 6 7 8 9
                1 2 3 4 5 6 7 8 9])
         '((1 1 1 1 1 1 1 1 1)
           (2 2 2 2 2 2 2 2 2)
           (3 3 3 3 3 3 3 3 3)
           (4 4 4 4 4 4 4 4 4)
           (5 5 5 5 5 5 5 5 5)
           (6 6 6 6 6 6 6 6 6)
           (7 7 7 7 7 7 7 7 7)
           (8 8 8 8 8 8 8 8 8)
           (9 9 9 9 9 9 9 9 9)))))

(deftest test-squares
  (is (= (squares [1 1 1 2 2 2 3 3 3
                   1 1 1 2 2 2 3 3 3
                   1 1 1 2 2 2 3 3 3
                   4 4 4 5 5 5 6 6 6
                   4 4 4 5 5 5 6 6 6
                   4 4 4 5 5 5 6 6 6
                   7 7 7 8 8 8 9 9 9
                   7 7 7 8 8 8 9 9 9
                   7 7 7 8 8 8 9 9 9])
         '((1 1 1 1 1 1 1 1 1)
           (2 2 2 2 2 2 2 2 2)
           (3 3 3 3 3 3 3 3 3)
           (4 4 4 4 4 4 4 4 4)
           (5 5 5 5 5 5 5 5 5)
           (6 6 6 6 6 6 6 6 6)
           (7 7 7 7 7 7 7 7 7)
           (8 8 8 8 8 8 8 8 8)
           (9 9 9 9 9 9 9 9 9)))))

(deftest test-unique-values
  (is (unique? [1 2 3 4 5 6 7 8 9])))

(deftest test-not-unique-values
  (is (not (unique? [1 2 3 4 5 6 7 8 8]))))

(deftest test-compute
  (is (= (compute [1 7 4 3 8 5 9 6 2
                   2 9 3 4 6 7 1 5 8
                   5 8 6 1 9 2 7 3 4
                   4 5 1 9 2 3 8 7 6
                   9 2 8 6 7 4 3 1 5
                   3 6 7 8 5 1 2 4 9
                   7 1 9 5 4 8 6 2 3
                   6 3 5 2 1 9 4 8 7
                   8 4 2 7 3 6 nil 9 1])
         [1 7 4 3 8 5 9 6 2
          2 9 3 4 6 7 1 5 8
          5 8 6 1 9 2 7 3 4
          4 5 1 9 2 3 8 7 6
          9 2 8 6 7 4 3 1 5
          3 6 7 8 5 1 2 4 9
          7 1 9 5 4 8 6 2 3
          6 3 5 2 1 9 4 8 7
          8 4 2 7 3 6 5 9 1])))
